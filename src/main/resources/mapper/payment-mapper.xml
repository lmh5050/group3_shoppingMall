<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.shoppingmall.repository.payment.PaymentRepository"> 

    <!-- 주문 정보 저장 -->
    <insert id="insertOrder">
        INSERT INTO orders (
            order_id, customer_id, order_status, total_discount_amount,
            total_amount, total_quantity, order_datetime
        )
        VALUES (
            #{orderId}, #{customerId}, #{orderStatus}, #{totalDiscountAmount},
            #{totalOrderAmount}, #{totalQuantity}, #{orderDatetime}
        )
    </insert>

    <!-- 주문 상세 정보 저장 -->
    <insert id="insertOrderDetail">
        INSERT INTO order_detail (
            order_id, serial_number, product_detail_id, product_name,
            size, color, quantity, price, discount_amount,
            product_price, product_total_price
        )
        VALUES (
            #{orderId}, #{serialNumber}, #{productDetailId}, #{productName},
            #{size}, #{color}, #{quantity}, #{price}, #{discountAmount},
            #{productPrice}, #{productTotalPrice}
        )
    </insert>

    <!-- 결제 정보 저장 -->
    <insert id="insertPayment">
        INSERT INTO payment (
            payment_id, order_id, customer_id, payment_method_id, payment_code,
            status, final_amount, tax_amount, discount_amount,
            payment_datetime, failure_reason, card_number, installment, 
            bank_deposit, cash_receipt_type, cash_receipt_number, account_deposit
        )
        VALUES (
            #{paymentId}, #{orderId}, #{customerId}, #{paymentMethodId}, #{paymentCode},
            #{status}, #{finalAmount}, #{taxAmount}, #{discountAmount},
            #{paymentDatetime}, #{failureReason}, #{cardNumber}, #{cardInstallment},
            #{cashBankName}, #{cashReceiptType}, #{cashReceiptNumber}, #{accountDeposit}
        )
    </insert>

    <!-- 마지막 결제 ID 조회 -->
    <select id="getLastPaymentId" resultType="String">
        SELECT payment_id
        FROM payment
        ORDER BY payment_id DESC
            LIMIT 1
    </select>

    <!-- 주문 정보 조회 -->
    <select id="getOrder" parameterType="Integer" resultType="org.example.shoppingmall.dto.payment.PaymentOrderDto">
        SELECT order_id, customer_id, order_status, 
               total_discount_amount, total_amount as totalOrderAmount, total_quantity, order_datetime 
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문 상세 정보 조회 -->
    <select id="getOrderDetails" parameterType="Integer" resultType="org.example.shoppingmall.dto.payment.PaymentOrderDetailDto">
        SELECT order_id, serial_number as orderDetailId, product_detail_id as productId,
               product_name, size, color, quantity, price, discount_amount,
            product_price, product_total_price
        FROM order_detail
        WHERE order_id = #{orderId}
    </select>

    <!-- 결제 정보 조회 -->
    <select id="getPayment" parameterType="Integer" resultType="org.example.shoppingmall.dto.payment.PaymentDto">
        SELECT payment_id, order_id, customer_id, payment_method_id, payment_code,
               status, final_amount, tax_amount, discount_amount,
               payment_datetime, failure_reason, card_number, installment as cardInstallment,
               bank_deposit as cashBankName, account_deposit, cash_receipt_type, cash_receipt_number
        FROM payment
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문번호로 마지막 결제 정보 조회 -->
    <select id="findLastPaymentByOrderId" parameterType="Integer" resultType="org.example.shoppingmall.dto.payment.PaymentDto">
        SELECT *
        FROM payment
        WHERE order_id = #{orderId}
        ORDER BY payment_datetime DESC
            LIMIT 1
    </select>

    <!-- 결제 정보 업데이트 -->
    <update id="updatePayment" parameterType="org.example.shoppingmall.dto.payment.PaymentDto">
        UPDATE payment
        <set>
            <if test="paymentCode != null">payment_code = #{paymentCode},</if>
            <if test="status != null">status = #{status},</if>
            <if test="paymentDatetime != null">payment_datetime = #{paymentDatetime},</if>
            <if test="failureReason != null">failure_reason = #{failureReason},</if>
            <if test="cardNumber != null">card_number = #{cardNumber},</if>
            <if test="cardInstallment != null">installment = #{cardInstallment},</if>
        </set>
        WHERE payment_id = #{paymentId}
    </update>

    <!-- 고객 이름 조회 -->
    <select id="findCustomerNameById" resultType="String">
        SELECT name
        FROM customer
        WHERE customer_id = #{customerId}
    </select>

    <!-- 결제 이력 저장 -->
    <insert id="insertPaymentHistory">
        INSERT INTO payment_history (
            payment_id,
            order_id,
            customer_id,
            payment_method_id,
            payment_code,
            status,
            final_amount,
            tax_amount,
            discount_amount,
            payment_datetime,
            failure_reason,
            card_number,
            installment,
            bank_deposit,
            cash_receipt_type,
            cash_receipt_number,
            account_deposit
        ) VALUES (
            #{paymentId},
            #{orderId},
            #{customerId},
            #{paymentMethodId},
            #{paymentCode},
            #{status},
            #{finalAmount},
            #{taxAmount},
            #{discountAmount},
            #{paymentDatetime},
            #{failureReason},
            #{cardNumber},
            #{cardInstallment},
            #{cashBankName},
            #{cashReceiptType},
            #{cashReceiptNumber},
            #{accountDeposit}
        )
    </insert>

    <!-- 주문 이력 저장 -->
    <insert id="insertOrderHistory">
        INSERT INTO order_history (
            order_id, customer_id, order_status, total_discount_amount,
            total_amount, total_quantity, order_datetime
        )
        VALUES (
            #{orderId}, #{customerId}, #{orderStatus}, #{totalDiscountAmount},
            #{totalOrderAmount}, #{totalQuantity}, #{orderDatetime}
        )
    </insert>

    <insert id="insertOrderDetailHistory">
        INSERT INTO order_detail_history (
            order_id,
            serial_number,
            product_detail_id,
            product_name,
            size,
            color,
            quantity,
            price,
            discount_amount,
            product_price,
            product_total_price
        ) VALUES (
            #{orderId},
            #{serialNumber},
            #{productDetailId},
            #{productName},
            #{size},
            #{color},
            #{quantity},
            #{price},
            #{discountAmount},
            #{productPrice},
            #{productTotalPrice}
        )
    </insert>

    <!-- 결제 대기 건 조회 -->
    <select id="getPendingPayments" resultType="org.example.shoppingmall.dto.payment.PaymentPendingDto">
        SELECT 
            p.payment_id as paymentId,
            p.order_id as orderId,
            o.customer_id as customerId,
            c.name as customerName,
            p.final_amount as finalAmount,
            o.order_datetime as paymentDatetime,
            p.account_deposit as accountDeposit,
            p.bank_deposit as cashBankName,
            p.status as status
        FROM payment p
        JOIN orders o ON p.order_id = o.order_id
        JOIN customer c ON o.customer_id = c.customer_id
        WHERE p.payment_method_id = 1 and p.active_flag = 1  -- 가상계좌 결제
        ORDER BY p.payment_datetime DESC
    </select>

    <!-- 결제 상태 변경 -->
    <update id="updatePaymentStatus" parameterType="org.example.shoppingmall.dto.payment.PaymentPendingDto">
        UPDATE payment
        SET status = #{status}
        WHERE payment_id = #{paymentId}
    </update>

    <!-- 배송 정보 저장 -->
    <insert id="insertShipping">
        INSERT INTO shipping (
            shipping_id, order_id, basic_address, detail_address, receive_people, receive_phone_number, shipping_price, delivery_request, zip_code
        ) VALUES (
            #{shippingId}, #{orderId}, #{basicAddress}, #{detailAddress}, #{receivePeople}, #{receivePhoneNumber}, #{shippingPrice}, #{deliveryRequest}, #{zipCode}
        )
    </insert>

    <!-- 마지막 배송 ID 조회 -->
    <select id="getLastShippingId" resultType="String">
        SELECT shipping_id
        FROM shipping
        ORDER BY shipping_id DESC
        LIMIT 1
    </select>

    <!-- 배송 이력 저장 -->
    <insert id="insertShippingHistory">
        INSERT INTO shipping_history (
            shipping_id, order_id, basic_address, detail_address, receive_people, receive_phone_number, shipping_price, delivery_request, zip_code
        ) VALUES (
            #{shippingId}, #{orderId}, #{basicAddress}, #{detailAddress}, #{receivePeople}, #{receivePhoneNumber}, #{shippingPrice}, #{deliveryRequest}, #{zipCode}
        )
    </insert>

    <!-- 주문 상태 변경 -->
    <update id="updateOrderStatus" parameterType="org.example.shoppingmall.dto.payment.PaymentPendingDto">
        UPDATE orders
        SET order_status = #{status}
        WHERE order_id = #{orderId}
    </update>

</mapper>
